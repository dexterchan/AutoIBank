apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'maven'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    ext{
        shadowjarVersion = '4.0.3'
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowjarVersion"
    }
}
apply plugin: 'com.github.johnrengelman.shadow'


group 'io.exp'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    mavenCentral()
}
mainClassName = 'io.exp.gateway.Main'

dependencies {
    compile project(':BusinessModel')

    compile group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile group: 'com.google.guava', name: 'guava', version: "$guavaVersion"
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: "$kafkaVersion"


    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: "$cliVersion"


    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testCompile group: 'org.mockito', name: 'mockito-core', version: "$mockitoVersion"
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: "$mockitoVersion"
    testCompile group: 'org.assertj', name: 'assertj-core', version: "$assetjVersion"
}

 test {
     useJUnitPlatform {
         //includeTags 'io.beam.exp.cryptorealtime.model','controllers'
         excludeTags 'integration'
     }
     testLogging.showStandardStreams = true

     testLogging {
         events "passed", "skipped", "failed"
     }
 }


 task integrationTest(type: Test) {
     useJUnitPlatform {
         includeTags 'integration'
     }
     check.dependsOn it
     shouldRunAfter test
     testLogging.showStandardStreams = true

     testLogging {
         events "passed", "skipped", "failed"
     }
 }


shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    zip64 true
    mergeServiceFiles()
    with jar
}