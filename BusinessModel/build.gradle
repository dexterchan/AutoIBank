apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0"
    }
}

apply plugin: "com.commercehub.gradle.plugin.avro"
//apply plugin: "com.commercehub.gradle.plugin.avro-base"

group 'io.exp'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"

    compile  "org.apache.beam:beam-sdks-java-core:$beamVersion"

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile "org.apache.avro:avro:${avroVersion}"
    //compile "org.apache.avro:avro:1.8.2"

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testCompile group: 'org.assertj', name: 'assertj-core', version: "$assetjVersion"
}
/*
task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    print ("Run Avro")
    source("src/resources/avro")
    outputDir = file("dest/avro")
}*/

//compileJava.source(generateAvro.outputs)

test {
    useJUnitPlatform {
        //includeTags 'io.beam.exp.cryptorealtime.model','controllers'
        excludeTags 'integration'
    }
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}


task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    check.dependsOn it
    shouldRunAfter test
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}